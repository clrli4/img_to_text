# -*- coding: utf-8 -*-
"""text_to_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17-SvuseVP4OA3cClRV6F_pIhXWD7YPxi
"""

!pip install jupyter-dash
!pip install diffusers==0.11.1
!pip install transformers scipy ftfy accelerate

import plotly.express as px
from jupyter_dash import JupyterDash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State# Load Data

import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
from dash.exceptions import PreventUpdate

df = px.data.tips()# Build App
app = JupyterDash(__name__)
img = Image.open(r"/content/astronaut_rides_horse.png")
app.layout = html.Div([
    html.H1("Generate Image From Prompt"),
    dcc.Input(id='prompt'),
    html.Button('Run', id='run'),
    html.Img(src=img, alt='Updating...', id='img'),

])# Define callback to update graph
@app.callback(
    Output("img", 'src'),
    [Input("run", "n_clicks")],
    [State('prompt', 'value')],
)

def update_output(n_clicks, value):
    if n_clicks is None:
        raise PreventUpdate
    else:
        pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16)
        pipe = pipe.to("cuda")

        prompt = value
        image = pipe(prompt).images[0]  # image here is in [PIL format](https://pillow.readthedocs.io/en/stable/)
        filename = "img.png"
        image.save(filename)
        img = Image.open(r"/content/img.png")

    return img

app.run_server(mode='external')

# df = px.data.tips()# Build App
# app = JupyterDash(__name__)
# img = Image.open(r"/content/astronaut_rides_horse.png")
# app.layout = html.Div([
#     html.H1("Generate Image From Prompt"),
#     dcc.Input(id='prompt'),
#     html.Img(src=img, alt='Updating...', id='img'),

# ])# Define callback to update graph
# @app.callback(
#     Output("img", 'src'),
#     Input("prompt", "value")
# )

# def update_output(value):
#     if len(value) > 2:
#         pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16)
#         pipe = pipe.to("cuda")

#         prompt = value
#         image = pipe(prompt).images[0]  # image here is in [PIL format](https://pillow.readthedocs.io/en/stable/)
#         filename = "img.png"
#         image.save(filename)
#         img = Image.open(r"/content/img.png")

#     return img